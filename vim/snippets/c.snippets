# main()
snippet main
	int main(int argc, const char *argv[]) {
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio.h}$>
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define
snippet ifdef
	#ifdef ${1}
		${2}
	#endif
snippet #if
	#if ${1}
		${2}
	#endif
# Header Include-Guard
snippet once
	#pragma once
	#ifndef ${1:`toupper(Filename('_$1_H', '_UNTITLED_H'))`}
	#define $1

	${2}

	#endif
# If Condition
snippet if
	if (${1}) {
		${2}
	}
snippet el
	else {
		${1}
	}
snippet elif
	else if($1) {
		${2}
	}
# Ternary conditional
snippet q
	${1} ? ${2} : ${3}
# Do While Loop
snippet do
	do {
		${2}
	} while (${1});
# While Loop
snippet wh
	while (${1:true}) {
		${2}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:n}; $2${3:++}) {
		${4}
	}
# Custom For Loop
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5}
	}
# Function
snippet f
	${1:void} ${2:foo}(${3:...}) {

	}
# Function Declaration
snippet fund
	${1:void} ${2:foo}(${3:...});
# Typedef
snippet td
	typedef ${1:existing} ${2:new};
# Struct
snippet st
	struct ${1} {
		${2}
	};
# Typedef struct
snippet tds
	typedef struct {
		${2}
	} ${1};
# Typdef enum
snippet tde
	typedef enum {
		${2}
	} ${1};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet pr
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet sw
	switch(${1}) {
		case ${2}:
			${3}
			break;
		default:
	}
snippet ca
	case ${1}:
		${2}
		break;
